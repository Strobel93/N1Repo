###########################################
Styleguide PEP8
###########################################
if check_is_true:
if check is None:
_hidden_internal_support_func_attri
switch1,switch2 = switch2,switch1
v1, __, ext = 1,2,3 # Ignoring value 2
white_spacing = [0, 1, 2]
ClassNames():
variable_names =
CONSTANT_NAMES =
function_names():
multi_line_style = (    # () > \ for line breaking
    "line 1"
    "line 2"
    )

###########################################
#Import:
    # any directory with an __init__.py (empty/comments/imports) file is considered a Python package
    # import of a folder (package) with an init will run whatever is in init
    # sort imports by name, first and last (from XXX import YYYY)
    # use imports in different lines for readability?
###########################################
import python_Datei_komplett
from Python_Datei import funktion
from Python_Datei import Klasse
from Order.Python_Datei import Funktion
from Python_Datei import (file1,file2,file)
from .currenfolderDatei import Klasse

###########################################
#Schreibweisen
###########################################
def small_letters(v1: Datatype,v2: Datatype = None) ->returndatatype:
	print('FU')
	
for x in range(n, 0, -1):
    print(x)
	
x += 2
x *= 2


for x in abc:
    do_something():
        break
else:
    # runs if for loop COMPLETES without break

# Use return to return evaluations themseleves, not only the results
def all_equal(a, b, c):
    return a == b == c

# Same Yield, different syntax
from z in range(x):
    yield z

yield from range(x)

#######################################
#Strings
#######################################
x = 69
y = 420
s = 'kek {}'.format(x)
s = 'kek {0}{1}{0}'.format(x,y)
s = 'kek {s1}{s2}{s1}'.format(s1=x,s2=y)

###########################################
# Functionsexectioon handling:
# everythings an object
###########################################	
def func1(p1):
    print(p1)

def func2(p1, p2):
    print(p1, p2)

def func_handler(func, *args):
    func(*args)

func_handler(func1, 1)
func_handler(func2, 1, 2)


####################################################################
#DynamischE Anzahl Parameter
####################################################################
# Dynamic number of unnamed parameters, all packed into 1 tupple: *args
# single * unpacks elements of list into individual objects/variables to be used as list of N* number of parameters
def dyn1(*test):
	print(test[0])
	print(test[1])
	for x in test:
		print(x)

# Dynamic number of named parameters / keyword arguments into 1 Dictionary: **kwargs
# double * unpacks dicitionary, allows connecting of dictionary keys and parameters to map the dict values as parameters 
def dyn2(**test):
	print(test['a'])
	print(test['b'])
	print(test['c'])
	for x, y in test.items():
		print(x, y)

# Dynamic number number of everything keyword arguments: param + *args + **kwargs
def dyn3(a, *test1, **test2):
	print(a)
	for x in test1:
		print(x)
	for x, y in test2.items():
		print(x, y)

dyn1('kek', 'kek1')
dyn2(a='kek', b='kek2', c='kek3')
dyn3('Param_A', *('tl_1', 'tl_2'), b='Param_B')
dyn3('Param_A', 'tl_1', 'tl_2', b='Param_B')
 
##############################################################################################
list comprehension vs Generator Expression:
	--> list_comprehension --> f�r viele iterationne
	--> iter f�r gro�e Datenmengen
##############################################################################################
symbols = 'ABCDE'
#################################
matrix = [[[1,2],[3,4]]
         ,[[5,6],[7,8]]]
		 
#F�r jede �u�ere Liste         
list_c = [x for x in matrix]

#F�r jedes Element in jeder �u�eren Liste
x2 = [y
	 for x in matrix
	 for y in x]        

#Kartesische Produkt
shirts = [(color,size) 
		   for color in colors
           for size in sizes]

shirts = [color+size for color,size in zip(color,size)]
v_append = [symbol for symbol in symbols symbol == 1 else 2]
v2 = sum(number for number in numbers)
dict_variable = {key:value for (key,value) in dictonary.items()}

###################################
#Join/Split in Strings/Listen
###################################
#Join:
e = ["Fix", "Foxy", "Lupo", "Dr. Knox"]
print(','.join(e))
print(''.join(e))

#Split:
txt = "welcome to the jungle"
x = txt.split()
print(x) #['welcome', 'to', 'the', 'jungle']

txt = "hello, my name is Peter, I am 26 years old"
x = txt.split(", ") #['hello', 'my name is Peter', 'I am 26 years old']

#Split mit mehreren trennern
import re
line = 'asdf fjdk; afed, fjek,asdf, foo'
re.split(r'[;,\s]\s*', line)

###################################
#Lambda: variable1,.. : formel mit variablen
###################################
#Bsp1 lamda entspricht funktion
f = lambda x: x *3 + 7
f(10)
 
#Lambda Verwendung f�r Dynamische Funktion
def multiply(k):
    return lambda x : x * k
    
double = multiply(2)
tripple = multiply(3)

####################################################################################################
#Counter(): findet h�ufigsten Wert, order by most to least common
####################################################################################################
from collections import Counter
l = [1,2,2,3]
print(Counter(l))
hochester_wert,Anzahel_Vorkommen = Counter(l).most_common()[0]
 
####################################################################
#Loop with counter
####################################################################
for counter, value in enumerate(some_list):
    print(counter, value)

####################################################################################################
#Iterator vs List: List contains Data, iterator yiels/gives data out on the fly
####################################################################################################
#List
my_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
print(my_list[3])
 
#Iterator
my_iter = iter(range(100))
print(my_iter, 'does shit only tells its iterator')
print(next(my_iter))
for i in my_iter:
     print(i)
 
####################################################################################################
#Iterator: erzeugt iterierbares objekt, das aber bei z.B. print keine Daten an sich anzeigt
####################################################################################################
from typing import Iterable, Iterator
def g(n: int) -> Iterator[int]:
    i = 0
    while i < n:
        yield i
        i += 1

#x wird iterator = iterierbares objekt, das bei print aber keine Daten zeigt
x = g(5)       
print(x)
#Nur bei iterration
for i in x:
    print(i)
 
####################################################################################################
#Iterateable: Verwendung als Parameter in funktionen wenn man irgend einen Parameter hat von dem man wei� er muss iterierbar sein
#Listen, Tupple, Dictionary,... sind Iterables
####################################################################################################
from typing import Iterable, Iterator,List
def f(ints: Iterable[int]) -> List[str]:
    return [str(x) for x in ints]
 
print(f(range(1, 3)))
  
#######################
#isinstance
#######################
#true
x = isinstance(True, bool)
x = isinstance(5, int)


####################################################################
#Argument Parsers for command Line:
####################################################################
#Ecuted using parameters: python filenaname.py 1 2 3
#Get Parameters of given to the execution
################
sys.argv
################
import sys
print(sys.argv)             #List of: Path/filename.py + Arguments (Path/filename.py,1,2,3)
print(sys.argv[0])          #Filepath/filename.py
print(len(sys.argv))        #4 = File + Parameters

################
 Argparse
################
import argparse
parser = argparse.ArgumentParser()
parser.add_argument('arg_at_index1')
args = parser.parse_args()
print(a

	
####################################################################	
#Python Main:
####################################################################
#__name__ variable: defaultwert is __main__
print("The value of __name__ is:", repr(__name__))
print("wenn .py file importiert wird ist der filename __name__:", repr(__name__))

#File1.py
print('Wird bei import und bei Dateiausf�hrung ausgef�rt')
def ff():
    print("Wird nur ausgef�hrt wenn Datei selbst ausgef�rht wird, nicht bei import")

if __name__ == "__main__":
    ff()

#File2.py
import file2.py
print('F�hrt print 1 aus File1 aus, nicht ff() weil __name__ = File1 und nicht main')

#Obere Code f�hrt main aus wenn Datei ausgepf�hrt wird, wenn importiert wird nicht!
#denn dann .py filename, wenn .py importiert wird wird code ausgef�hrt wenn nicht in klassen/func

